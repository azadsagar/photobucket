# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-img-parser
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
#  stage: dev
  region: ap-south-1

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
      - Effect: "Allow"
        Action:
          - "s3:ListBucket"
        Resource:
          - arn:aws:s3:::${env:UPLOAD_BUCKET}
          - arn:aws:s3:::${env:PHOTO_BUCKET}
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
          - "s3:DeleteObject"
        Resource: arn:aws:s3:::${env:UPLOAD_BUCKET}/*
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
        Resource: arn:aws:s3:::${env:PHOTO_BUCKET}/*
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource:
          - Fn::GetAtt: [ MetaDataDB, Arn ]


# you can define service wide environment variables here
  environment:
    OUTPUT_BUCKET: ${env:PHOTO_BUCKET}
    METADATA_DB : !Ref MetaDataDB

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

package:
  patterns:
    - '!node_modules/**'
    - '!layer/**'
    - '!.npmignore'
    - index.js
    - '!package.json'
    - '!package-lock.json'
    - '!handler.js'

layers:
  photoParserLibs:
    path: layer
    compatibleRuntimes:
      - nodejs12.x

functions:
  lambda:
    handler: index.handler
    memorySize: 1024
    timeout: 60
    layers:
      - {Ref: PhotoParserLibsLambdaLayer}
    events:
      - s3:
          bucket: ${env:UPLOAD_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .SAGAR
          existing: true
#      - s3:
#          bucket: ${env:UPLOAD_BUCKET}
#          event: s3:ObjectCreated:*
#          rules:
#            - suffix: .png
#          existing: true
#      - s3:
#          bucket: ${env:UPLOAD_BUCKET}
#          event: s3:ObjectCreated:*
#          rules:
#            - suffix: .svg
#          existing: true
#      - s3:
#          bucket: ${env:UPLOAD_BUCKET}
#          event: s3:ObjectCreated:*
#          rules:
#            - suffix: .jpeg
#          existing: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    MetaDataDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:METADATA_DB}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST